apply plugin: 'maven-publish'
apply plugin: 'signing'

def sonatypeRepositoryUrl

def isLocalDebug() {
    return VERSION_NAME.contains("LOCAL")
}

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

if(isLocalDebug()) {
    println 'LOCAL BUILD'
    sonatypeRepositoryUrl = '../repo-local'
}else if (isReleaseBuild()) {
    println 'RELEASE BUILD'
    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    println 'DEBUG BUILD'
    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('ossrhUsername') ? ossrhUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('ossrhPassword') ? ossrhPassword : ""
}

//第 1 处
ext["signing.keyId"] = '' //签名的密钥后8位
ext["signing.password"] = ''  //签名设置的密码
ext["signing.secretKeyRingFile"] = '' //生成的secring.gpg文件目录
ext["ossrhUsername"] = ''  //sonatype用户名
ext["ossrhPassword"] = ''  //sonatype密码


File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

afterEvaluate { project ->
    publishing {
        publications  {
            release(MavenPublication) {
            //    beforeDeployment { deployment -> signing.signPom(deployment) }
                if (plugins.hasPlugin('android-library')) {
                    from components.release
                } else if (plugins.hasPlugin('java')) {
                    from components.java
                    jar.preserveFileTimestamps = false
                    jar.reproducibleFileOrder = true
                }

                groupId = GROUP_ID
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME
                println " verison_name: " + VERSION_NAME + ", GROUP_ID: " + GROUP_ID + ", POM_ARTIFACT_ID: " + POM_ARTIFACT_ID

                pom {
                    name = POM_NAME
                    packaging = POM_PACKAGING
                    description = POM_DESCRIPTION
                    url = POM_URL

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                if(isLocalDebug()) {
                    println " local debug archives " + sonatypeRepositoryUrl
                    url = sonatypeRepositoryUrl
                }else {
                    println " remote  archives " + sonatypeRepositoryUrl
                    url = sonatypeRepositoryUrl
//                    repository(url: sonatypeRepositoryUrl) {
//                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//                    }
                    credentials {
                        username = getRepositoryUsername()
                        password = getRepositoryPassword()
                    }
                }
            }

        }
    }

//    signing {
//        println 'Signing archives...'
//        sign publishing.publications.release
//    }
//
}

